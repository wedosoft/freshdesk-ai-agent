프로젝트 진행 상황 (2024-03-21)

1. 프로젝트 구조
   - frontend/ 폴더에 Freshdesk 앱 관련 코드 위치
   - 주요 폴더 구조:
     frontend/
     ├── app/
     │   ├── scripts/
     │   │   └── app.js
     │   ├── styles/
     │   │   └── styles.css
     │   └── index.html
     ├── config/
     │   ├── iparams.js
     │   ├── iparams.html
     │   └── iparams.json
     ├── server/
     └── manifest.json

2. 구현된 기능
   - 모달 UI 구현 (열기/닫기, 탭 전환)
   - 검색 기능 (유사 티켓, FAQ, AI 답변)
   - API 통신 (유사 티켓, FAQ, AI 답변 생성)
   - 결과 표시 및 답변 복사 기능

3. 다음 작업 목록
   - manifest.json 수정 필요:
     - product.freshdesk.location.ticket_sidebar.url을 ai-response.html에서 index.html로 변경
   - app/styles/styles.css 확인 및 스타일링 완성
   - config/iparams.js 확인 및 설치 매개변수 설정 완성
   - server/ 폴더에 필요한 서버 코드 구현

4. 주의사항
   - Freshdesk 앱 작업 시에는 frontend 폴더만 집중해서 작업
   - 다른 폴더(lambda/, server/, terraform/ 등)는 무시하고 진행

대화 내용:

1. FAQ와 유사 티켓 검색 기능 설명
- FAQ 데이터는 DynamoDB의 `faq-table`에 저장
- 티켓 데이터는 DynamoDB의 `tickets-table`에 저장
- 검색 시 `sentence-transformers` 라이브러리 사용
- API 엔드포인트:
  - FAQ 검색: POST /faq
  - 유사 티켓 검색: POST /similar-tickets

2. 웹훅 이벤트 관련 논의
- 현재 웹훅은 새 티켓 생성 시에만 트리거됨
- 상담사가 티켓을 열거나 답장할 때의 이벤트 트리거 필요성 논의
- Freshdesk의 웹훅 이벤트 제약 확인:
  - ticket_created
  - ticket_updated
  - ticket_deleted
  - conversation_created

3. UI/UX 설계 논의
- AI Buddy (가칭) 버튼 추가
  - 상단에 위치
  - 눈에 잘 띄는 디자인
  - 클릭 시 우측 모달 창 표시

- 모달 창 UI 구성
  - 우측에 위치
  - 기존 Freshdesk UI를 가리지 않도록 설계
  - 크기 조절 가능
  - 다크 모드 지원

- 정보 구조 및 상호작용
  - 탭 방식 고려 (유사 티켓 / FAQ / AI 답변 생성)
  - 각 섹션별 검색/생성 버튼
  - 검색 결과 표시 방식
  - 답변에 결과 추가하는 방법 (드래그 앤 드롭 또는 버튼)

- 사용자 경험 고려사항
  - 작업 흐름(Workflow)
    - 티켓 열기 → AI Buddy 버튼 클릭 → 정보 확인 → 답변 작성
  - 피드백
    - 로딩 상태 표시
    - 결과 없을 때 안내 메시지
    - 오류 발생 시 사용자 친화적 메시지
  - 접근성
    - 키보드 단축키 지원
    - 모달 창 크기 조절
    - 다크 모드 지원

4. 다음 단계
- Freshdesk 커스텀 앱 개발
- 모달 창 UI 구현
- AI 기능 연동 